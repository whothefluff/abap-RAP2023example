managed implementation in class ZBP_R_R58_ORDERS unique;
strict( 2 );
with draft;
extensible {
  with additional save;
  with determinations on modify;
  with validations on save;
  with determinations on save;
}

define behavior for ZR_R58_Orders alias Orders
  persistent table ZR58ORDER
  draft table ZR58ORDERD
  etag master LastLocalChangeAt
  lock master total etag ModifiedAt
  authorization master( global )
  extensible
  {

    field( mandatory: create, readonly: update )
     ID,
     ExternalID;

    field( readonly )
     CreatedAt,
     CreatedBy,
     ModifiedAt,
     ModifiedBy,
     LastLocalChangeAt,
     LastLocalChangeBy,
     TotalQuantityInKG;

//    field( features : instance ) Status; can make a field mandatory or not dynamically

//    field ( suppress ) ExternalID; can "ignore" fields

    create( precheck );  //use to make sure the external id is unique (by calling validation?)
    update( features: instance ); //use to make sure the status is modifiable (by calling validation?)
    delete( features: instance ); // same as above

    association _Items {
      create( features: instance ); // same as above
      with draft;
    }
    association _Status{ create; } //?????????

    draft action Edit;
    draft action Activate;
    draft action Discard;
    draft action Resume;
    draft determine action Prepare extensible {
      validation Items~AssureQtyIsPositive;
    }

    internal static function GetEntityWithGreatestExtID
      result selective [1] $self;

    validation AssureExtIDIsUnique on save {
      create;
      field ExternalID;
    }

    determination AssignExternalID on save {
      create;
      field ID;
    } //self-explanatory

    determination RecalculateSumInKG on modify {
      create;
      update;
    } //sum all items converting to KG

    determine action PrepareForPersistance extensible {
      determination AssignExternalID;
      validation Items~AssureQtyIsPositive;
    } //can be called from EML?

    factory action Duplicate [1]; //self-explanatory

    action Post
      result[1] $self; //self-explanatory

    static function ReturnPosted
      result[0..*] $self; //self-explanatory

    function CalculateSUM
      result selective[1] $self; //self-explanatory

    save( adjustnumbers ) action( authorization: global, features: global ) test; //is this an action????

    static save(finalize) action( precheck ) test2; //is this an action????

    event Posted; //supposedly workds with SAP Event Mesh

    mapping for ZR58ORDER corresponding extensible {
      ID = id;
      ExternalID = external_id;
      CreatedAt = created_at;
      CreatedBy = created_by;
      ModifiedAt = modified_at;
      ModifiedBy = modified_by;
      LastLocalChangeAt = last_local_change_at;
      LastLocalChangeBy = last_local_change_by;
      Status = status;
    }

  }

define behavior for ZR_R58_OrderItems alias Items
  persistent table ZR58ORDERITEM
  draft table ZR58ORDERITEMD
  etag dependent
  lock dependent
  authorization dependent
  extensible
  {

    field( mandatory: create, readonly: update )
     up__ID,
     ID;

    field( mandatory )
     Unit,
     Quantity;

    field( readonly )
     CreatedAt,
     CreatedBy,
     ModifiedAt,
     ModifiedBy;

    update( features: instance ); //use to make sure only allowed if status is correct (by calling validation?)
    delete( features: instance ); //same as above

    association _Header { with draft; }

    validation AssureQtyIsPositive on save { field Quantity; } //self-explanatory

    factory action Duplicate [1]; //self-explanatory

    mapping for ZR58ORDERITEM corresponding extensible {
      up__ID = up__id;
      ID = id;
      CreatedAt = created_at;
      CreatedBy = created_by;
      ModifiedAt = modified_at;
      ModifiedBy = modified_by;
      Unit = unit;
      Quantity = quantity;
    }

  }